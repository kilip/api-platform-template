#!/usr/bin/env bash

UNAMEOUT="$(uname -s)"

WHITE='\033[1;37m'
NC='\033[0m'

# Verify operating system is supported...
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. Laravel Sail supports macOS, Linux, and Windows (WSL2)." >&2

    exit 1
fi

# Source the ".env" file so symfony environment variables are available...
if [ -f ./api/.env ]; then
    source ./api/.env
fi

# Define environment variables...
export APP_PORT=${APP_PORT:-80}
export APP_SERVICE=${APP_SERVICE:-"php"}
export DB_PORT=${DB_PORT:-3306}
export WWWUSER=${WWWUSER:-$UID}
export WWWGROUP=${WWWGROUP:-$(id -g)}
export EXEC_CMD="exec"

if [ -z "${DOYO_CI}" ]; then
    export DOYO_CI=0;
fi

if [[ 1 == "${DOYO_CI}" ]]; then
    export EXEC_CMD="exec -T"
fi


# Source the ".env" file so symfony environment variables are available...
if [ -f ./.env ]; then
    source ./.env
fi
if [ -z "${API_PLATFORM_ENV}" ]; then
    API_PLATFORM_ENV="dev"
fi

if [ -f ./.env ]; then
    source ./.env
fi

# start handling command args
COMPOSE_FILE="-f docker-compose.yml"

if test -f "docker-compose.dev.yml"; then
    COMPOSE_FILE="${COMPOSE_FILE} -f docker-compose.dev.yml"
fi

if [ $# -gt 0 ]; then
    if [ "$1" == "build" ]; then
        echo -e "${WHITE}Build container images${NC}"
        docker-compose $COMPOSE_FILE build "${@: 2}"
    elif [ "$1" == "boot" ]; then
        echo -e "${WHITE}Booting up yawik ...${NC}"
        docker-compose $COMPOSE_FILE build "${@: 2}"
        docker-compose $COMPOSE_FILE up "${@: 2}"
    elif [ "$1" == "up" ]; then
        echo -e "${WHITE}Running api-platform in development mode${NC}"
        docker-compose ${COMPOSE_FILE} up "${@: 2}"
    elif [[ "$1" == "require" || "$1" == "req" ]]; then
        docker-compose $EXEC_CMD php composer require "${@: 2}"
    elif [ "$1" == "remove" ]; then
        docker-compose $EXEC_CMD php composer remove "${@: 2}"
    elif [ "$1" == "composer" ]; then
        docker-compose $EXEC_CMD php "${@: 1}"
    elif [[ "$1" == "sf" || "$1" == "symfony" ]]; then
        docker-compose $EXEC_CMD php bin/console "${@: 2}"
    elif [[ "$1" == "psalm" ]]; then
        docker-compose $EXEC_CMD php ./vendor/bin/psalm "${@: 2}"
    elif [[ "$1" == "csfix" ]]; then
        docker-compose $EXEC_CMD php ./vendor/bin/php-cs-fixer "${@: 2}"
    elif [[ "$1" == "phpspec" ]]; then
        docker-compose $EXEC_CMD php ./vendor/bin/phpspec "${@: 2}"
    elif [[ "$1" == "phpunit" ]]; then
        docker-compose $EXEC_CMD php ./vendor/bin/phpunit "${@: 2}"
    elif [[ "$1" == "behat" ]]; then
        docker-compose $EXEC_CMD php ./vendor/bin/behat "${@: 2}"
    elif [[ "$1" == "cache:clear" ]]; then
        docker-compose $EXEC_CMD php bin/console cache:clear "${@: 2}"
    elif [[ "$1" == "doctrine" ]]; then
        docker-compose $EXEC_CMD php bin/console "${@: 2}"
    elif [[ "$1" == "yarn" ]]; then
        docker-compose $EXEC_CMD pwa yarn "${@: 2}"
    elif [[ "$1" == "npx" ]]; then
        docker-compose $EXEC_CMD pwa npx "${@: 2}"
    elif [[ "$1" == "ca-install" ]]; then
        # ref https://chromium.googlesource.com/chromium/src/+/refs/heads/main/docs/linux/cert_management.md
        openssl req -x509 -out "${PWD}/docker/certs/localhost.crt" -keyout "${PWD}/docker/certs/localhost.key" \
          -newkey rsa:2048 -nodes -sha256 \
          -subj '/CN=localhost' -extensions EXT -config <( \
           printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")

        # chrome db install
        certutil -d sql:$HOME/.pki/nssdb -D -n "${APP_NAME}" || echo "cert not exists in chrome";
        certutil -d sql:$HOME/.pki/nssdb -A -t "C,," -n "${APP_NAME}" -i "${PWD}/docker/certs/localhost.crt"

        # firefox install
        db_file=$(find $HOME/.mozilla -type f -name 'cert*.db')
        db_dir=$(dirname $db_file)
        certutil -d sql:$db_dir -D -n "${APP_NAME}" || echo "cert not exists in firefox";
        certutil -d sql:$db_dir -A -t "C,," -n "${APP_NAME}" -i "${PWD}/docker/certs/localhost.crt"
    else
        docker-compose "$@"
    fi
else
    docker-compose ps
fi
